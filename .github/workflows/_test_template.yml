name: ~test template

on:
  workflow_call:
    inputs:
      RUNNER:
        type: string
        description: Runner to use for test
        required: true
      TIMEOUT:
        type: number
        description: Max runtime of test in minutes
        required: false
        default: 10
      SCRIPT:
        type: string
        description: Test script to execute
        required: true
      AFTER_SCRIPT:
        type: string
        description: Script to run after main test
        required: false
        default: ":"
      IS_OPTIONAL:
        type: boolean
        description: Failure will cancel all other tests if set to true
        required: false
        default: false
      IS_UNIT_TEST:
        type: boolean
        description: Upload coverage as unit test
        required: false
        default: false
      TESTS_TO_RUN:
        type: string
        description: Tests to run
        required: false
        default: '["all"]'
    outputs:
      conclusion:
        description: Conclusion of main test step
        value: ${{ jobs.main.outputs.conclusion }}
      log:
        description: Last 2000 characters of the test step's log
        value: ${{ jobs.main.outputs.log }}
      potential_infra_failure:
        description: Boolean flag when infra-related keyword spotted in logs.
        value: ${{ jobs.main.outputs.potential_infra_failure }}
jobs:
  main:
    runs-on: ${{ inputs.RUNNER }}
    name: ${{ inputs.SCRIPT }}
    if: contains(fromJSON(inputs.TESTS_TO_RUN), inputs.SCRIPT) || contains(fromJSON(inputs.TESTS_TO_RUN), 'all')
    outputs:
      conclusion: ${{ steps.check.conclusion }}
      log: ${{ steps.check.outputs.log }}
      potential_infra_failure: ${{ steps.check.outputs.potential_infra_failure }}
    env:
      DIR: ${{ github.run_id }}
      IS_OPTIONAL: ${{ inputs.IS_OPTIONAL }}
      SCRIPT: ${{ inputs.SCRIPT }}
      IS_UNIT_TEST: ${{ inputs.IS_UNIT_TEST }}
    steps:
      - name: Docker system cleanup
        run: |
          docker system prune -af --filter "until=24h" --force || true

      - name: Docker pull image
        run: |
          docker pull nemoci.azurecr.io/nemo_container:${{ github.run_id }}

      - name: Clean repos
        run: |

      - name: Install jq
        run: |
          curl -sS https://webi.sh/jq | sh

      - name: Create UUID
        id: uuid
        run: |
          echo "id=$(uuidgen)" >> "$GITHUB_OUTPUT"

      - name: Checkout NeMo
        uses: actions/checkout@v2
        with:
          repository: NVIDIA/NeMo
          path: ${{ github.run_id }}/${{steps.uuid.outputs.id }}/NeMo

      - name: Start container
        run: |
          mkdir -p $DIR

          # Map of runner names to GPU device configurations
          declare -A GPU_CONFIGS=(
            ["myVm-01"]="0,1"
            ["myVm-02"]="2,3" 
            ["myVm-03"]="4,5"
            ["myVm-04"]="6,7"
          )

          ARG=("")
          if [[ -n "${GPU_CONFIGS[${{ runner.name }}]}" ]]; then
            ARG=("--runtime=nvidia --cpus="40" --memory="400g" --gpus '\"device=${GPU_CONFIGS[${{ runner.name }}]}\"'")
          elif [[ "${{ inputs.RUNNER }}" != *cpu* ]]; then
            ARG=("--runtime=nvidia --gpus all")
          fi

          cmd=$(cat <<RUN_TEST_EOF
          #!/bin/bash
          docker container rm -f nemo_container_${{ github.run_id }}_${{ runner.name }} || true
          docker run \
            --rm \
            -d \
            --name nemo_container_${{ github.run_id }}_${{ runner.name }} ${ARG[@]} \
            --shm-size=64g \
            --env TRANSFORMERS_OFFLINE=0 \
            --env HYDRA_FULL_ERROR=1 \
            --env HF_HOME=/home/TestData/HF_HOME \
            --env RUN_ID=${{ github.run_id }} \
            --volume $(pwd)/${{ github.run_id }}/${{steps.uuid.outputs.id }}/NeMo:/workspace \
            --volume /mnt/datadrive/TestData:/home/TestData nemoci.azurecr.io/nemo_container:${{ github.run_id }} \
            bash -c "sleep $(( ${{ inputs.TIMEOUT }} * 60 + 60 ))"
          RUN_TEST_EOF
          )

          echo "$cmd" | tee "$DIR/retry_job.sh"
          bash $DIR/retry_job.sh

      - name: Create run-script
        id: create
        run: |

          COVERAGE_PREFIX=$([[ "$IS_UNIT_TEST" == "true" ]] && echo "unit-test" || echo "e2e")
          echo "coverage-prefix=$COVERAGE_PREFIX" | tee -a "$GITHUB_OUTPUT"

          mkdir -p $DIR
          rm $DIR/.coverage || true
          rm $DIR/err.log || true

          cmd=$(cat <<RUN_TEST_EOF
          #!/bin/bash
            
          (
            set -e

            docker exec -t nemo_container_${{ github.run_id }}_${{ runner.name }} bash -c '\
              cp -r /opt/Megatron-LM/ /workspace/ && \
              bash tests/functional_tests/$SCRIPT.sh && \
              echo "Finished successfully." || echo "Did not finish."'
          ) 2>&1 | tee $DIR/err.log

          RUN_TEST_EOF
          )

          echo "timeout_in_seconds=$(( ${{ inputs.TIMEOUT }} * 60 ))" | tee -a "$GITHUB_OUTPUT"
          echo "$cmd" | tee "$DIR/job.sh"

      - name: Run main script
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: ${{ steps.create.outputs.timeout_in_seconds }}
          max_attempts: 3
          shell: bash
          retry_on: timeout
          command: /bin/bash ${{ github.run_id }}/job.sh
          on_retry_command: /bin/bash ${{ github.run_id }}/retry_job.sh

      - name: Check result
        id: check
        run: |
          cat $DIR/err.log

          log=$(tail -c 2000 $DIR/err.log |  base64 -w 0)
          echo "log=$log" >> "$GITHUB_OUTPUT"

          potential_infra_failure=$(cat $DIR/err.log | grep -Eqiw "device" && echo true || echo false)
          echo "potential_infra_failure=$potential_infra_failure" >> "$GITHUB_OUTPUT"

          docker exec nemo_container_${{ github.run_id }}_${{ runner.name }} coverage combine
          docker exec nemo_container_${{ github.run_id }}_${{ runner.name }} coverage xml
          docker cp nemo_container_${{ github.run_id }}_${{ runner.name }}:/workspace/.coverage $DIR/.coverage 
          docker cp nemo_container_${{ github.run_id }}_${{ runner.name }}:/workspace/coverage.xml $DIR/coverage.xml

          coverage_report=coverage-${{ steps.create.outputs.coverage-prefix }}-${{ github.run_id }}-$(uuidgen)
          echo "coverage_report=$coverage_report" >> "$GITHUB_OUTPUT"

          IS_SUCCESS=$(tail -n 1 $DIR/err.log | grep -q "Finished successfully." && echo "true" || echo "false")

          if [[ "$IS_SUCCESS" == "false" && "$IS_OPTIONAL" == "true" ]]; then
            echo "::warning:: Test failed, but displayed as successful because it is marked as optional."
            IS_SUCCESS=true
          fi

          if [[ "$IS_SUCCESS" == "false" ]]; then
            echo Test did not finish successfully.
            exit 1
          fi

          exit $EXIT_CODE

      - name: Test coverage
        shell: bash -x -e -u -o pipefail {0}
        run: |
          docker exec -t nemo_container_${{ github.run_id }}_${{ runner.name }} coverage report -i

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ steps.check.outputs.coverage_report != 'none' }}
        with:
          name: ${{ steps.check.outputs.coverage_report }}
          path: |
            ${{ github.run_id }}/coverage.xml
            ${{ github.run_id }}/.coverage
          include-hidden-files: true

      - name: Container shutdown
        if: always()
        run: |
          docker exec nemo_container_${{ github.run_id }}_${{ runner.name }} bash -c "chown -R $(id -u):$(id -g) /workspace"
          rm -rf $(pwd)/${{ github.run_id }}/${{steps.uuid.outputs.id }} || true
          docker container rm -f nemo_container_${{ github.run_id }}_${{ runner.name }} || true
